#!/bin/bash
blue=$(tput setaf 4)
normal=$(tput sgr0)

display_center(){
    longest=$(cat $1 | awk '{ print length }' | sort -n | tail -1)
    indent=$(( ($(tput cols) - longest) / 2))
    while IFS= read -r line; do
        line_c="$2 $line"
        printf "%${indent}s%s\n" '' "$line_c"
    printf "%s" "$(tput sgr0)"
    done < "$1"
}

type_err(){
    indent=$(( $(tput cols) / 2))
    printf "%${indent}s%s" '' " "
    while read line
    do
        # split single characters into lines
        grep -o . <<<$line | while read a
        do
            # short random delay between keystrokes
            sleep 0.$((RANDOM%3))
            # make fake typo every 30th keystroke
            if [[ $((RANDOM%30)) == 1 ]]
            then
                # print random character between a-z
                printf "\\$(printf %o "$((RANDOM%26+97))")"
                # wait a bit and delete it again
                sleep 0.5; echo -ne '\b'; sleep 0.2
            fi
            # output a space, or $a if it is not null
            echo -n "${a:- }"
        done
        echo
    done
}

config_github() {
}


ellipses() {
    indent=$(( $(tput cols) / 2))

    declare -a animation=("[  .    ]" "[  ..   ]" "[  ...  ]" "[       ]")

    for (( i=0; i<$1; i++ )); do
        for l in "${animation[@]}"; do
            printf "%${indent}s%s" '' " "
            printf "%s\r" "$l"
            sleep .2
        done
    done
}

echo "> brew cask install iterm2" | type_err
sleep 1
echo -e "\r\033[1A\033[0K"
display_center "assets/logo_to.txt" ${normal}
sleep 1
ellipses 3
display_center "assets/logo_from.txt" ${blue}

echo "Please enter your github username if you'd like to continue"; read ghub_name
echo "And the email associated with that account?"; read ghub_email
echo "Thanks ${ghub_name}! üòä Let's get started!"

git config --global user.name ${ghub_name}
git config --global user.email ${ghub_email}

# brew setup
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

brew update
brew upgrade

### dev tools
brew cask install iterm2

### Development
brew cask install docker

### Command line tools - install new ones, update others to latest version
brew install fish
curl -L https://get.oh-my.fish | fish
brew install trash
brew install git  # upgrade to latest
brew install wget
brew install npm

### python
# brew install python3

### node setup
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
nvm install node
nvm use node

### npm essentials
npm install -g eslint
npm install -g prettify

### code editor
brew cask install visual-studio-code

### notes
brew cask install notion
brew cask install typora

### utils
brew cask install google-chrome

### chat/communication
brew cask install slack
brew cask install zoomus

### run brew cleanup
brew cleanup

### Set OSX Preferences - borrowed from https://github.com/mathiasbynens/dotfiles/blob/master/.macos

# Close any open System Preferences panes, to prevent them from overriding
# settings we‚Äôre about to change
osascript -e 'tell application "System Preferences" to quit'

# System Preferences > Mission Control > do not automatically rearrange Spaces based on most recent use
defaults write com.apple.dock mru-spaces -bool false

# 24-hour clock
defaults write com.apple.menuextra.clock DateFormat -string 'EEE MMM d  H:mm'

# Finder: show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# only show open apps in dock
defaults write com.apple.dock static-only -bool true

# disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# disable the ‚ÄúAre you sure you want to open this application?‚Äù dialog
defaults write com.apple.LaunchServices LSQuarantine -bool false

# avoid creating .DS_Store files on network or USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Trackpad: enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

# Enable the automatic update check
defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true

# Download newly available updates in background
defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

# Install System data files & security updates
defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

# Don‚Äôt display the annoying prompt when quitting iTerm
defaults write com.googlecode.iterm2 PromptOnQuit -bool false

echo "All finished! üéâ üéâ üéâ Happy coding!"
